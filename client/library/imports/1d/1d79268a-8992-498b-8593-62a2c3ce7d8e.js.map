{"version":3,"sources":["assets\\script\\framework\\net\\Http.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAA6C;AAM7C;IAAA;IAgGA,CAAC;IA9FuB,QAAG,GAAvB,UAAwB,GAAW;uCAAG,OAAO;;;gBACzC,sBAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;wBAC/B,IAAI,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;wBAC/B,GAAG,CAAC,kBAAkB,GAAG;4BACrB,IAAI,GAAG,CAAC,UAAU,IAAI,CAAC,EAAE;gCACrB,cAAI,CAAC,KAAK,CAAC,cAAO,CAAC,IAAI,EAAE,gBAAgB,GAAG,GAAG,GAAG,gBAAgB,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;gCACjF,QAAQ,GAAG,CAAC,MAAM,EAAE;oCAChB,KAAK,GAAG;wCACJ;4CACI,IAAI,GAAG,SAAM,CAAC;4CACd,IAAI;gDACA,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;6CACtC;4CACD,OAAO,CAAC,EAAE;gDACN,MAAM,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;6CACjC;4CACD,cAAI,CAAC,KAAK,CAAC,cAAO,CAAC,IAAI,EAAE,qBAAqB,GAAG,GAAG,GAAG,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;4CAC3F,OAAO,CAAC,GAAG,CAAC,CAAC;yCAChB;wCACD,MAAM;oCACV;wCACI;4CACI,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAA;yCACnC;wCACD,MAAM;iCACb;6BACJ;wBACL,CAAC,CAAC;wBACF,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;wBAC3B,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACnB,CAAC,CAAC,EAAC;;;KACN;IAEmB,SAAI,GAAxB,UAAyB,GAAW,EAAE,IAAS;uCAAG,OAAO;;;gBACrD,sBAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;wBAC/B,IAAI,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;wBAC/B,GAAG,CAAC,kBAAkB,GAAG;4BACrB,IAAI,GAAG,CAAC,UAAU,IAAI,CAAC,EAAE;gCACrB,QAAQ,GAAG,CAAC,MAAM,EAAE;oCAChB,KAAK,GAAG;wCACJ;4CACI,IAAI,GAAG,SAAM,CAAC;4CACd,IAAI;gDACA,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;6CACtC;4CACD,OAAO,CAAC,EAAE;gDACN,MAAM,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;6CACjC;4CACD,cAAI,CAAC,KAAK,CAAC,cAAO,CAAC,GAAG,EAAE,sBAAsB,GAAG,GAAG,GAAG,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;4CAC3F,OAAO,CAAC,GAAG,CAAC,CAAC;yCAChB;wCACD,MAAM;oCACV;wCACI;4CACI,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAA;yCACnC;wCACD,MAAM;iCACb;6BACJ;wBACL,CAAC,CAAC;wBACF,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;wBAC5B,GAAG,CAAC,gBAAgB,CAAC,cAAc,EAAE,mCAAmC,CAAC,CAAC;wBAE1E,IAAI,IAAI,EAAE;4BACN,IAAI,OAAO,GAAG,EAAE,CAAC;4BACjB,KAAK,IAAI,GAAG,IAAI,IAAI,EAAE;gCAClB,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE;oCACvC,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iCAC/E;6BACJ;4BACD,IAAI,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;4BACnC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;yBACxB;6BACI;4BACD,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;yBAClB;wBAED,cAAI,CAAC,KAAK,CAAC,cAAO,CAAC,GAAG,EAAE,sBAAsB,GAAG,GAAG,GAAG,kBAAkB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;oBACtG,CAAC,CAAC,EAAC;;;KACN;IAEc,YAAO,GAAtB,UAAuB,IAAY;QAC/B,IAAI,IAAI,IAAI,GAAG,EAAE;YACb,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,CAAC;SACrC;QACD,IAAI,IAAI,IAAI,GAAG,EAAE;YACb,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC;SACnC;QACD,IAAI,IAAI,IAAI,GAAG,EAAE;YACb,OAAO,EAAE,OAAO,EAAE,eAAe,EAAE,CAAC;SACvC;QACD,OAAO,EAAE,OAAO,EAAE,eAAe,EAAE,CAAC;IACxC,CAAC;IAEL,WAAC;AAAD,CAhGA,AAgGC,IAAA","file":"","sourceRoot":"/","sourcesContent":["import Clog, { ClogKey } from \"../clog/Clog\";\n\n\n\n\n\nexport default class Http {\n\n    public static async Get(url: string): Promise<JSON> {\n        return new Promise((resolve, reject) => {\n            var xhr = new XMLHttpRequest();\n            xhr.onreadystatechange = () => {\n                if (xhr.readyState == 4) {\n                    Clog.Green(ClogKey.Http, \"get json from \" + url + \" status code :\" + xhr.status);\n                    switch (xhr.status) {\n                        case 200:\n                            {\n                                let msg: JSON;\n                                try {\n                                    msg = JSON.parse(xhr.responseText);\n                                }\n                                catch (e) {\n                                    reject({ message: '返回信息错误' });\n                                }\n                                Clog.Green(ClogKey.Http, \"[XHR GET]\\t\\n[url]:\" + url + \"\\t\\n[msg]:\" + JSON.stringify(msg));\n                                resolve(msg);\n                            }\n                            break;\n                        default:\n                            {\n                                reject(this.getEror(xhr.status))\n                            }\n                            break;\n                    }\n                }\n            };\n            xhr.open(\"GET\", url, true);\n            xhr.send(null);\n        });\n    }\n\n    public static async Post(url: string, data: any): Promise<JSON> {\n        return new Promise((resolve, reject) => {\n            var xhr = new XMLHttpRequest();\n            xhr.onreadystatechange = () => {\n                if (xhr.readyState == 4) {\n                    switch (xhr.status) {\n                        case 200:\n                            {\n                                let msg: JSON;\n                                try {\n                                    msg = JSON.parse(xhr.responseText);\n                                }\n                                catch (e) {\n                                    reject({ message: '返回信息错误' });\n                                }\n                                Clog.Green(ClogKey.Net, \"[XHR POST]\\t\\n[url]:\" + url + \"\\t\\n[msg]:\" + JSON.stringify(msg));\n                                resolve(msg);\n                            }\n                            break;\n                        default:\n                            {\n                                reject(this.getEror(xhr.status))\n                            }\n                            break;\n                    }\n                }\n            };\n            xhr.open(\"POST\", url, true);\n            xhr.setRequestHeader('content-type', \"application/x-www-form-urlencoded\");\n\n            if (data) {\n                var tempArr = [];\n                for (var key in data) {\n                    if (data.hasOwnProperty(key) && data[key]) {\n                        tempArr.push(encodeURIComponent(key) + '=' + encodeURIComponent(data[key]));\n                    }\n                }\n                var dataToSend = tempArr.join('&');\n                xhr.send(dataToSend);\n            }\n            else {\n                xhr.send(null);\n            }\n\n            Clog.Green(ClogKey.Net, \"[XHR POST]\\t\\n[url]:\" + url + \"\\t\\n[post data]:\" + JSON.stringify(data));\n        });\n    }\n\n    private static getEror(code: number) {\n        if (code >= 500) {\n            return { message: '服务器返回异常，请重试' };\n        }\n        if (code >= 400) {\n            return { message: '错误的请求，请重试' };\n        }\n        if (code >= 300) {\n            return { message: '登录状态可能已过期，请重试' };\n        }\n        return { message: '服务器返回数据错误，请重试' };\n    }\n\n}\n"]}