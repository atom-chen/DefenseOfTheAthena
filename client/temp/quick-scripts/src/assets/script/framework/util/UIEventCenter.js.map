{"version":3,"sources":["assets\\script\\framework\\util\\UIEventCenter.ts"],"names":[],"mappings":";;;;;;AACA,2CAA6C;AAC7C,sDAAqD;AAGrD;IAAA;IAwCA,CAAC;IAtCG,UAAU;IACI,yBAAW,GAAzB,UAA0B,GAAc,EAAE,QAAkB,EAAE,cAAmC,EAAE,WAAyB;QAA9D,+BAAA,EAAA,2BAAmC;QAAE,4BAAA,EAAA,iBAAyB;QACxH,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE;YACjB,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE;gBACnB,OAAO;aACV;YACD,IAAI,CAAC,0BAAa,CAAC,cAAc,CAAC,EAAE;gBAChC,2BAAY,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;aAC1C;YACD,kBAAkB;YAClB,IAAI,WAAW,GAAG,CAAC,EAAE;gBACjB,GAAG,CAAC,YAAY,GAAG,KAAK,CAAC,CAAM,mBAAmB;gBAClD,MAAM,CAAC,UAAU,CAAC,cAAQ,IAAI,GAAG,EAAE;oBAAE,GAAG,CAAC,YAAY,GAAG,IAAI,CAAA;iBAAE,CAAC,CAAC,EAAE,WAAW,GAAC,IAAI,CAAC,CAAA;aACtF;YACD,QAAQ,EAAE,CAAA;QACd,CAAC,CAAC,CAAA;IACN,CAAC;IAED,YAAY;IACE,4BAAc,GAA5B,UAA6B,IAAa,EAAE,QAA0C;QAClF,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,UAAC,CAAsB,IAAO,QAAQ,CAAC,CAAC,CAAC,CAAA,CAAC,CAAC,CAAC,CAAC;IACxF,CAAC;IAEa,0BAAY,GAA1B,UAA2B,IAAa,EAAE,QAA0C;QAChF,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,UAAC,CAAsB,IAAO,QAAQ,CAAC,CAAC,CAAC,CAAA,CAAC,CAAC,CAAC,CAAC;IACtF,CAAC;IAEa,6BAAe,GAA7B,UAA8B,IAAa,EAAE,QAA0C;QACnF,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,UAAC,CAAsB,IAAO,QAAQ,CAAC,CAAC,CAAC,CAAA,CAAC,CAAC,CAAC,CAAC;IACzF,CAAC;IAEa,2BAAa,GAA3B,UAA4B,IAAa,EAAE,QAA0C;QACjF,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,UAAC,CAAsB,IAAO,QAAQ,CAAC,CAAC,CAAC,CAAA,CAAC,CAAC,CAAC,CAAC;IACvF,CAAC;IAEa,0BAAY,GAA1B;IAEA,CAAC;IACL,oBAAC;AAAD,CAxCA,AAwCC,IAAA;AAxCY,sCAAa","file":"","sourceRoot":"/","sourcesContent":["\nimport { IsNullOrEmpty } from \"./StringUtil\";\nimport { AudioManager } from \"../audio/AudioManager\";\n\n\nexport class UIEventCenter {\n\n    //按钮点击方法封装\n    public static ButtonEvent(btn: cc.Button, callback: Function, clickSoundName: string = \"S_Button\", disableTime: number = 0.4) {\n        btn.node.on(\"click\", () => {\n            if (!btn.interactable) {\n                return;\n            }\n            if (!IsNullOrEmpty(clickSoundName)) {\n                AudioManager.PlaySound(clickSoundName);\n            }\n            //如果屏蔽时间大于0，点击之后屏蔽\n            if (disableTime > 0) {\n                btn.interactable = false;      //禁用按钮 一定时间后再启用，防连击\n                window.setTimeout(() => { if (btn) { btn.interactable = true } }, disableTime*1000)\n            }\n            callback()\n        })\n    }\n\n    //在节点上移动方法封装\n    public static TouchNodeStart(node: cc.Node, callback: (e: cc.Event.EventTouch) => void) {\n        node.on(cc.Node.EventType.TOUCH_START, (e: cc.Event.EventTouch) => { callback(e) });\n    }\n\n    public static TouchNodeEnd(node: cc.Node, callback: (e: cc.Event.EventTouch) => void) {\n        node.on(cc.Node.EventType.TOUCH_END, (e: cc.Event.EventTouch) => { callback(e) });\n    }\n\n    public static TouchNodeCancel(node: cc.Node, callback: (e: cc.Event.EventTouch) => void) {\n        node.on(cc.Node.EventType.TOUCH_CANCEL, (e: cc.Event.EventTouch) => { callback(e) });\n    }\n\n    public static TouchNodeMove(node: cc.Node, callback: (e: cc.Event.EventTouch) => void) {\n        node.on(cc.Node.EventType.TOUCH_MOVE, (e: cc.Event.EventTouch) => { callback(e) });\n    }\n\n    public static ScrollSelect(){\n\n    }\n}"]}